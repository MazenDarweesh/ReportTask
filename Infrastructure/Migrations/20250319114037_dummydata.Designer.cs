// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250319114037_dummydata")]
    partial class dummydata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.AcademicYear", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("AcademicYears");

                    b.HasData(
                        new
                        {
                            Id = "01HWH8B1ZB4G0K3N00YZH7WCEA",
                            DateFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "2024-2025",
                            SchoolId = "01HWH8B1ZB4G0K3N00YZH7WCE1"
                        },
                        new
                        {
                            Id = "01HWH8B1ZB4G0K3N00YZH7WCEB",
                            DateFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "2025-2026",
                            SchoolId = "01HWH8B1ZB4G0K3N00YZH7WCE2"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Classroom", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AcademicYearId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GradeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("GradeId");

                    b.ToTable("Classrooms");

                    b.HasData(
                        new
                        {
                            Id = "01HWH8B1ZB4G0K3N00YZH7WCEE",
                            AcademicYearId = "01HWH8B1ZB4G0K3N00YZH7WCEA",
                            GradeId = "01HWH8B1ZB4G0K3N00YZH7WCEG",
                            Name = "Class A",
                            Number = 0
                        },
                        new
                        {
                            Id = "01HWH8B1ZB4G0K3N00YZH7WCEF",
                            AcademicYearId = "01HWH8B1ZB4G0K3N00YZH7WCEB",
                            GradeId = "01HWH8B1ZB4G0K3N00YZH7WCEH",
                            Name = "Class B",
                            Number = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Grade", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = "01HWH8B1ZB4G0K3N00YZH7WCEG",
                            DateFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Grade 1",
                            SectionId = "01HWH8B1ZB4G0K3N00YZH7WCEX"
                        },
                        new
                        {
                            Id = "01HWH8B1ZB4G0K3N00YZH7WCEH",
                            DateFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Grade 2",
                            SectionId = "01HWH8B1ZB4G0K3N00YZH7WCEY"
                        });
                });

            modelBuilder.Entity("Domain.Entities.School", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportHeaderOneAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportHeaderOneEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportHeaderTwoAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportHeaderTwoEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = "01HWH8B1ZB4G0K3N00YZH7WCE1",
                            Address = "123 Elm St",
                            Name = "Learning Oasis",
                            ReportHeaderOneAr = "مرحبًا بكم في مدرسة الواحة",
                            ReportHeaderOneEn = "Welcome to Learning Oasis",
                            ReportHeaderTwoAr = "نسعى للتميز",
                            ReportHeaderTwoEn = "Striving for Excellence",
                            ReportImage = "school1_logo.png"
                        },
                        new
                        {
                            Id = "01HWH8B1ZB4G0K3N00YZH7WCE2",
                            Address = "456 Maple Ave",
                            Name = "Future Leaders Academy",
                            ReportHeaderOneAr = "المستقبل يبدأ هنا",
                            ReportHeaderOneEn = "Future Starts Here",
                            ReportHeaderTwoAr = "نبني قادة المستقبل",
                            ReportHeaderTwoEn = "Building Tomorrow’s Leaders",
                            ReportImage = "school2_logo.png"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Section", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            Id = "01HWH8B1ZB4G0K3N00YZH7WCEX",
                            Name = "Primary",
                            SchoolId = "01HWH8B1ZB4G0K3N00YZH7WCE1"
                        },
                        new
                        {
                            Id = "01HWH8B1ZB4G0K3N00YZH7WCEY",
                            Name = "Secondary",
                            SchoolId = "01HWH8B1ZB4G0K3N00YZH7WCE2"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Semester", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AcademicYearId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.ToTable("Semesters");

                    b.HasData(
                        new
                        {
                            Id = "01HWH8B1ZB4G0K3N00YZH7WCEC",
                            AcademicYearId = "01HWH8B1ZB4G0K3N00YZH7WCEA",
                            DateFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fall 2024"
                        },
                        new
                        {
                            Id = "01HWH8B1ZB4G0K3N00YZH7WCED",
                            AcademicYearId = "01HWH8B1ZB4G0K3N00YZH7WCEB",
                            DateFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Spring 2025"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = "01HWH8B1ZB4G0K3N00YZH7WCE3",
                            Gender = "Male",
                            MobileNumber = "123-456",
                            Name = "John Doe",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = "01HWH8B1ZB4G0K3N00YZH7WCE4",
                            Gender = "Female",
                            MobileNumber = "987-654",
                            Name = "Jane Smith",
                            Nationality = "Canadian"
                        });
                });

            modelBuilder.Entity("Domain.Entities.StudentAcademicYear", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassroomId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GradeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SemesterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("GradeId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAcademicYears");

                    b.HasData(
                        new
                        {
                            Id = "01HWH8B1ZB4G0K3N00YZH7WCFZ",
                            ClassroomId = "01HWH8B1ZB4G0K3N00YZH7WCEE",
                            GradeId = "01HWH8B1ZB4G0K3N00YZH7WCEG",
                            SchoolId = "01HWH8B1ZB4G0K3N00YZH7WCE1",
                            SemesterId = "01HWH8B1ZB4G0K3N00YZH7WCEC",
                            StudentId = "01HWH8B1ZB4G0K3N00YZH7WCE3"
                        },
                        new
                        {
                            Id = "01HWH8B1ZB4G0K3N00YZH7WCEJ",
                            ClassroomId = "01HWH8B1ZB4G0K3N00YZH7WCEF",
                            GradeId = "01HWH8B1ZB4G0K3N00YZH7WCEH",
                            SchoolId = "01HWH8B1ZB4G0K3N00YZH7WCE2",
                            SemesterId = "01HWH8B1ZB4G0K3N00YZH7WCED",
                            StudentId = "01HWH8B1ZB4G0K3N00YZH7WCE4"
                        });
                });

            modelBuilder.Entity("Domain.Entities.AcademicYear", b =>
                {
                    b.HasOne("Domain.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Domain.Entities.Classroom", b =>
                {
                    b.HasOne("Domain.Entities.AcademicYear", "AcademicYear")
                        .WithMany()
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("Domain.Entities.Grade", b =>
                {
                    b.HasOne("Domain.Entities.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Domain.Entities.Section", b =>
                {
                    b.HasOne("Domain.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Domain.Entities.Semester", b =>
                {
                    b.HasOne("Domain.Entities.AcademicYear", "AcademicYear")
                        .WithMany()
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AcademicYear");
                });

            modelBuilder.Entity("Domain.Entities.StudentAcademicYear", b =>
                {
                    b.HasOne("Domain.Entities.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany("StudentAcademicYears")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Grade");

                    b.Navigation("School");

                    b.Navigation("Semester");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Navigation("StudentAcademicYears");
                });
#pragma warning restore 612, 618
        }
    }
}
